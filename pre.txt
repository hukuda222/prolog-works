1).
実装した機能は以下の通りです。

駅と路線を増やす:
    やるだけです。

所要時間を表示する:
    link,shinlink,reachBy,reachBySubの引数を増やして実装しました。

所要時間が短い順に出力する:
    距離の基準は、各駅停車で乗った場合のみを想定しています。
    findallで経路の候補を全て出してから、述語cost({距離}+1以下の乱数,経路のリスト)というように定義して、距離と経路を対応付けています。
    距離のリストをソートして短い経路順に出力します。(標準では上位3つ)
    "A kara B"を入力後に、数字を入れるとその個数分だけ候補を出すようにしました。(その個数ない場合は、あるだけ全部出します)

新幹線の追加:
    通常のline述語とは別に、shinlineを作りました。
    標準はshinlineを使いますが、"~ shinkansen wo tsukawazuni"で使わないことができます。

短い経路順ではなく、乗り換えが少ない順にソートする:
    "~ norikae"で乗り換えが少ない順にソートします。
    reachBy,reachBySubの引数を増やして実装しました。
    最初は、andとorを使って所要時間順の時の処理と一つにまとめようとしたのですが、そうすると異様に処理が重くなったので分離しました。

経由の実装:
    "A kara B C"でC経由でAからBに行く経路を出します。
    A to CとC to Bをやって足すだけです。

リストの代わりに半角スペースで区切った文字列を受け取って、半角スペースで区切った文字列を返すようにする:
    入力文字列をリストに変換して処理してから、出力時に文字列に戻しています。

AAを表示する:
    putAAという述語で描画させています。

特定のキーワードに反応する:
    "transport"と同じ要領で"conv"というのを作りました。
    reactwordsという二つのリストを引数にとる述語を作り、一つ目の引数が入力に含まれていれば二つ目の引数を出力します。
    豊富ではありませんが、東工大の話題にも対応しています。

述語のdelta遷移の自由度を高くする:
    初期状態から初期状態への遷移と、最終状態から最終状態への遷移をどんな単語でもできるようにしました。
    また、"ikitai"のような特に意味のない単語に関する処理を消し、
    出発点と終着点を入力済みでオプション待ちの状態から、同じ状態へどんな単語でも遷移できるようにしました。
    つまり、
    "jiyugaoka kara oookayama midorigaoka 10 norikae"と
    "ok techchan oookayama made jiyugaoka kara midorigaoka keiyude ikitaina shinkansen ikitaiyo kouho wo 10 dashitene norikae sukunaku"
    を同じ意味として動作するようにしました。

RPGの実装:
    "tequest"と入力すると突如RPGが始まります。
    現状はプロローグとスライムを倒すだけですが、もうちょっとボリューム感を出したいです。

2).
発表を希望します。


* 追記
    おそらく問題ないと思いますが、techchan3.proの想定している入力は、
    techchan("shibuya kara oookayama").
    というような文字列のみを引数にした呼び出しです。

    techchan3.proは、AAの都合上51文字以上の横幅のコマンドプロントで実行してください。
    また、こちらの実行環境とそちらの実行環境の違いによりエラーが生じる可能性がありますので出た場合は教えていただけると幸いです。

    これで30点に届きますでしょうか。届かない場合はあとどのくらいやれば届くか教えてください。
